<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-08-16T16:55:33+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yuan Lee</title><subtitle>A blog about technology and stuff related</subtitle><entry><title type="html">Swift 常用宏定义</title><link href="http://localhost:4000/ios-swift-define/" rel="alternate" type="text/html" title="Swift 常用宏定义" /><published>2021-08-16T12:00:00+08:00</published><updated>2021-08-16T12:00:00+08:00</updated><id>http://localhost:4000/ios-swift-define</id><content type="html" xml:base="http://localhost:4000/ios-swift-define/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;iOS 开发中使用 Swift 时的一些常用宏定义&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1封装的日志输出功能&quot;&gt;1.封装的日志输出功能&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;此处用到的 DEBUG 需要提前定义，Build Settings -&amp;gt; Swift Compiler - Custom Flags -&amp;gt; Other Swift Flags&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;/// 为 Swift 封装的日志输出功能（T表示不指定日志信息参数类型)
/// - Parameter message:    要打印的内容
/// - Parameter file:       当前所在文件
/// - Parameter methodName: 当前位置的方法名
/// - Parameter lineNumber: 当前位置所在行数
public func NSLog&amp;lt;T&amp;gt;(_ message: T, file : String = #file, methodName: String = #function, lineNumber : Int = #line) {
    #if DEBUG

    ///去掉 .swift
    ///let filePath = file as NSString
    ///let filePath_copy = filePath.lastPathComponent as NSString
    ///let fileName = filePath_copy.deletingPathExtension
    
    //获取文件名
    ///带后缀 .swift
    let fileName = (file as NSString).lastPathComponent
    // 创建一个日期格式器
    let dformatter = DateFormatter()
    // 为日期格式器设置格式字符串
    dformatter.dateFormat = &quot;yyyy-MM-dd HH:mm:ss.SSSSSS&quot;
    // 使用日期格式器格式化当前日期、时间
    let datestr = dformatter.string(from: Date())
    //打印日志内容
    print(&quot;\(datestr)\n    文件:\(fileName)[第\(lineNumber)行]\n    方法:\(methodName)\n    打印:\(message)&quot;)
    #else
    #endif
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;2为-swift-封装的发送通知的快捷方法&quot;&gt;2.为 Swift 封装的发送通知的快捷方法&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;/// 为 Swift 封装的发送通知的快捷方法
/// - Parameter name:      通知名称
/// - Parameter object:    通知对象
/// - Parameter userInfo:  通知内容
public func postNotification(name: String, object: Any? = nil, userInfo: [AnyHashable : Any]? = nil) {
    NotificationCenter.default.post(name: NSNotification.Name.init(rawValue: name), object: object, userInfo: userInfo)
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;3为-swift-封装的添加通知监听的快捷方法&quot;&gt;3.为 Swift 封装的添加通知监听的快捷方法&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;/// 为 Swift 封装的添加通知监听的快捷方法
/// - Parameter observer: 监听者
/// - Parameter selector: 收到通知时执行的方法
/// - Parameter name:     要监听的通知名称
/// - Parameter object:   发送通知的对象
public func addNotificationObserver(_ observer: Any, selector: Selector, name: String, object: Any? = nil) {
    NotificationCenter.default.addObserver(observer, selector: selector, name: NSNotification.Name.init(name), object: object)
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;4为-swift-封装的添加通知监听并执行-闭包-的快捷方法&quot;&gt;4.为 Swift 封装的添加通知监听并执行 ‘闭包’ 的快捷方法&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;/// 为 Swift 封装的添加通知监听并执行 ‘闭包’ 的快捷方法
/// - Parameter forName: 要监听的通知名称
/// - Parameter object:  发送通知的对象，如果为 nil，监听任何对象
/// - Parameter queue:   执行闭包的线程，如果为 nil，在主线程执行
/// - Parameter block:   收到通知时要执行的闭包
/// - Parameter note:    返回的 ’Notification‘ 通知对象
public func addNotificationObserver(forName: String, object: Any? = nil, queue: OperationQueue? = nil, using block: @escaping (_ note: Notification) -&amp;gt; Void) {
    NotificationCenter.default.addObserver(forName: NSNotification.Name.init(forName), object: object, queue: queue, using: block)
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;5为-swift-封装的移除通知监听的快捷方法&quot;&gt;5.为 Swift 封装的移除通知监听的快捷方法&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;/// 为 Swift 封装的移除通知监听的快捷方法
/// - Parameter observer: 监听者
/// - Parameter name:     通知名称
/// - Parameter object:   发送通知的对象
public func removeNotificationObserver(_ observer: Any, name: NSNotification.Name? = nil, object: Any? = nil) {
    NotificationCenter.default.removeObserver(observer, name: name, object: object)
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;6rgba-方式表示颜色-alpha-默认为-10&quot;&gt;6.RGBA 方式表示颜色， Alpha 默认为 1.0&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;/// RGBA 方式表示颜色， Alpha 默认为 1.0
/// - Parameters:
///   - rgb:   十六进制数字，如 0xFFFFFF
///   - alpha: 透明度百分比，范围: 0 ~ 1.0，默认为 1.0
///     - 0 表示完全透明，1 表示完全不透明
/// - Returns: UIColor
public func RGBColor(rgb: Int, alpha: CGFloat = 1.0) -&amp;gt; UIColor {
    UIColor.init(red: ((CGFloat)((rgb &amp;amp; 0xFF0000) &amp;gt;&amp;gt; 16)) / 255.0, green: ((CGFloat)((rgb &amp;amp; 0xFF00) &amp;gt;&amp;gt; 8)) / 255.0, blue: ((CGFloat)(rgb &amp;amp; 0xFF)) / 255.0, alpha: alpha)
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;7在主线程延迟执行函数&quot;&gt;7.在主线程延迟执行函数&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;/// 在主线程延迟执行函数
/// - Parameters:
///   - delta:   延迟时间，单位 - 秒
///   - execute: 要延迟执行的闭包
public func delay(_ delta: Double, _ execute: @escaping () -&amp;gt; Void) {
    let deadline = DispatchTime.now() + delta
    DispatchQueue.main.asyncAfter(deadline: deadline, execute: execute)
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="blog" /><category term="iOS" /><summary type="html">Summary</summary></entry><entry><title type="html">iOS简单的MVC模式实现(二)</title><link href="http://localhost:4000/ios-mvc-demo-two/" rel="alternate" type="text/html" title="iOS简单的MVC模式实现(二)" /><published>2019-03-15T13:00:00+08:00</published><updated>2019-03-15T13:00:00+08:00</updated><id>http://localhost:4000/ios-mvc-demo-two</id><content type="html" xml:base="http://localhost:4000/ios-mvc-demo-two/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;承接&lt;a href=&quot;https://www.yuanlee.cc/ios-mvc-demo-one/&quot;&gt;上文&lt;/a&gt;，继续介绍SDWebImage，SDAutoLayout的简单使用，
以及加载大图时避免占用过多内存的处理方法。&lt;/p&gt;

&lt;p&gt;本文为&lt;a href=&quot;https://www.yuanlee.cc/ios-mvc-demo-one/&quot;&gt;iOS简单的MVC模式实现(一)&lt;/a&gt;的后续部分&lt;/p&gt;

&lt;p&gt;Demo Github 地址: &lt;a href=&quot;https://github.com/yuanlee0214/iOS-MVC-Demo&quot;&gt;https://github.com/yuanlee0214/iOS-MVC-Demo&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;sd&quot;&gt;一、SDWebImage 和 SDAutoLayout 的使用&lt;/h3&gt;

&lt;h5&gt;头文件 &quot;LEEDetailVC.h&quot;&lt;/h5&gt;

&lt;p&gt;使用 SDWebImage 下载图片的 ViewController&lt;/p&gt;

&lt;p&gt;使用 SDAutoLayout 进行布局的 ViewController&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;

@interface LEEDetailVC : UIViewController
@property (nonatomic, copy) NSString *imgURL; //image的URL字符串
@property (nonatomic, copy) NSString *imgKey; //SDWebImage对image进行缓存所需的key
@property (nonatomic, copy) NSString *imgName; //加载本地大图的图片名称

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;实现文件 &quot;LEEDetailVC.m&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define LEEContentHeight (LEESHeight - StatusBarAndNavigationBarHeight - TabbarSafeBottomMargin)

#import &quot;LEEDetailVC.h&quot;
#import &quot;LargeImageView.h&quot;

@interface LEEDetailVC () &amp;lt;UIScrollViewDelegate&amp;gt;
{
    UIScrollView *scrollV;
    LargeImageView *imgV;
    UIView *errorV;
    UILabel *loadingLab;
    UIActivityIndicatorView *activityIndicatorView;
    CGFloat currentScale;
}
@end

@implementation LEEDetailVC

//static BOOL SDImageCacheOldShouldDecompressImages = YES;
//static BOOL SDImagedownloderOldShouldDecompressImages = YES;

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [self layoutView];
    
//    [[SDWebImageManager sharedManager].imageCache setMaxMemoryCost:30*1024*1024]; // 设置图片总缓存 30M 大小，默认为0没有限制
//    [[SDWebImageManager sharedManager].imageCache.config setMaxCacheSize:3*1024*1024]; // 设置单个图片限制 3M 大小
//    [[SDWebImageManager sharedManager].imageCache.config setMaxCacheAge:60*60*24]; // 设置缓存保留时间为 1 天
//
//    SDImageCache *canche = [SDImageCache sharedImageCache];
//    SDImageCacheOldShouldDecompressImages = canche.config.shouldDecompressImages;
//    canche.config.shouldDecompressImages = NO;
//
//    SDWebImageDownloader *sdDownloder = [SDWebImageDownloader sharedDownloader];
//    SDImagedownloderOldShouldDecompressImages = sdDownloder.shouldDecompressImages;
//    sdDownloder.shouldDecompressImages = NO;
    
}

- (void)didReceiveMemoryWarning {
    // 清除缓存
    [[SDWebImageManager sharedManager] cancelAll];
    [[SDWebImageManager sharedManager].imageCache clearWithCacheType:SDImageCacheTypeAll completion:nil];
    [[SDImageCache sharedImageCache] setValue:nil forKey:_imgKey];
}

#pragma mark -- UIScrollViewDelegate
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView {
    return imgV;
}

- (void)scrollViewDidZoom:(UIScrollView *)scrollView {
    CGRect frame = imgV.frame;
    frame.origin.x = (scrollView.frame.size.width - imgV.frame.size.width) &amp;gt; 0 ? (scrollView.frame.size.width - imgV.frame.size.width) * 0.5 : 0;
    frame.origin.y = (scrollView.frame.size.height - imgV.frame.size.height) &amp;gt; 0 ? (scrollView.frame.size.height - imgV.frame.size.height) * 0.5 : 0;
    imgV.frame = frame;
    scrollV.contentSize = CGSizeMake(imgV.frame.size.width, imgV.frame.size.height);
}

- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(UIView *)view atScale:(CGFloat)scale {
    currentScale = scale;
}

#pragma mark -- 其他方法
- (CGFloat)imageContentHeight:(UIImage *)image {
    CGFloat imgHeight = image.size.height;
    CGFloat imgWidth = image.size.width;
    CGFloat imgH = imgHeight * (LEESWidth / imgWidth);
    return imgH;
}

//双击放大图片
- (void)tapTwiceCallback:(UITapGestureRecognizer *)tapGesture {
    if (currentScale &amp;gt; 1.0) {
        [scrollV setZoomScale:1.0 animated:YES];
    } else {
        [scrollV setZoomScale:2.5 animated:YES];
    }
}

#pragma mark -- 公有方法
- (void)layoutView {
    [self.navigationController.navigationBar setTitleTextAttributes:@{NSForegroundColorAttributeName : [UIColor whiteColor], NSFontAttributeName : [UIFont systemFontOfSize:16]}];
    self.title = _imgKey;
    self.view.backgroundColor = LEEHexColor(0xDBDBDB, 1.0);
    
    scrollV = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 64, LEESWidth, LEESHeight - 64)];
    [self.view addSubview:scrollV];
    // 使用 ScrollView 实现图片的放大缩小
    scrollV.minimumZoomScale = 1;  //最小倍数为一倍，即最小只显示原图
    scrollV.maximumZoomScale = 5;  //最大放大倍数为五倍
    scrollV.showsVerticalScrollIndicator = NO;
    scrollV.showsHorizontalScrollIndicator = NO;
    scrollV.scrollEnabled = YES;
    scrollV.userInteractionEnabled = YES;
    scrollV.bounces = NO;
    scrollV.delegate = self;
    // 添加双击放大图片手势
    UITapGestureRecognizer *tapTwice = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapTwiceCallback:)];
    tapTwice.numberOfTapsRequired = 2;
    [scrollV addGestureRecognizer:tapTwice];
	
    if (_imgName.length) {  // 加载本地图片
        UIImage *image = [UIImage imageNamed:_imgName];
        CGFloat imgH = [self imageContentHeight:image];
        scrollV.contentSize = CGSizeMake(LEESWidth, imgH);
        if (imgH &amp;lt; LEEContentHeight) {  // 不是长图片时，居中显示
            imgV = [[LargeImageView alloc] initWithFrame:CGRectMake(0, LEEContentHeight / 2 - imgH / 2, LEESWidth, imgH)];
        } else { // 长图片时铺满 scrollView
            imgV = [[LargeImageView alloc] initWithFrame:CGRectMake(0, 0, LEESWidth, imgH)];
        }
        [imgV setImage:image];
        imgV.contentMode = UIViewContentModeScaleAspectFill;
        [scrollV addSubview:imgV];
        
        return;
    }
    
    //下载失败提示
    errorV = [[UIView alloc] init];
    [self.view addSubview:errorV];
    errorV.sd_layout.xIs(0).yIs(0).widthIs(LEESWidth).heightIs(self.view.height);
    errorV.hidden = YES;
    errorV.backgroundColor = [UIColor whiteColor];

    UIImageView *netErrorImgV = [[UIImageView alloc] init];
    [errorV addSubview:netErrorImgV];
    netErrorImgV.sd_layout.yIs(160).widthIs(LEESWidth - 100).heightIs(130);
    netErrorImgV.centerX = LEESWidth / 2.0;
    netErrorImgV.image = [UIImage imageNamed:@&quot;NetError&quot;];

    UILabel *errorLab = [[UILabel alloc] init];
    [errorV addSubview:errorLab];
    errorLab.sd_layout.topSpaceToView(netErrorImgV, 10).widthIs(LEESWidth).heightIs(25);
    errorLab.centerX = LEESWidth / 2.0;
    errorLab.text = @&quot;Loading failed, please try again.&quot;;
    errorLab.textAlignment = NSTextAlignmentCenter;
    errorLab.textColor = LEEHexColor(0x999999, 1.0);
    errorLab.font = [UIFont systemFontOfSize:17];

    UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];
    [errorV addSubview:btn];
    btn.sd_layout.widthIs(200).heightIs(40).centerXEqualToView(netErrorImgV).topSpaceToView(errorLab, 15);
    [btn setTitle:@&quot;Refresh&quot; forState:UIControlStateNormal];
    [btn setTitleColor:LEEHexColor(0x2472B9, 1.0) forState:UIControlStateNormal];
    btn.titleLabel.font = [UIFont systemFontOfSize:17];
    btn.backgroundColor = [UIColor whiteColor];
    btn.layer.borderColor = LEEHexColor(0x2472B9, 1.0).CGColor;
    btn.layer.borderWidth = 1.0f;
    btn.layer.cornerRadius = 20;
    [btn addTarget:self action:@selector(viewUpdate) forControlEvents:UIControlEventTouchUpInside];
    
    UIImage *image = [[SDImageCache sharedImageCache] imageFromCacheForKey:_imgKey];
    if (image) {
        CGFloat imgH = [self imageContentHeight:image];
        scrollV.contentSize = CGSizeMake(LEESWidth, imgH);
        if (imgH &amp;lt; LEEContentHeight) {  // 不是长图片时，居中显示
            imgV = [[LargeImageView alloc] initWithFrame:CGRectMake(0, LEEContentHeight / 2 - imgH / 2, LEESWidth, imgH)];
        } else { // 长图片时铺满 scrollView
            imgV = [[LargeImageView alloc] initWithFrame:CGRectMake(0, 0, LEESWidth, imgH)];
        }
        [imgV setImage:image];
        imgV.contentMode = UIViewContentModeScaleAspectFill;
        [scrollV addSubview:imgV];
    } else {
        // 网络请求时状态栏转圈圈
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
		
        /*
        // 屏幕中间转圈
        activityIndicatorView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
        [scrollV addSubview:activityIndicatorView];
        activityIndicatorView.center = CGPointMake(LEESWidth / 2.0, LEEContentHeight / 2.0  - 50);
        CGAffineTransform transform =  CGAffineTransformMakeScale(1.5, 1.5);
        activityIndicatorView.transform = transform;
        [activityIndicatorView startAnimating];
        activityIndicatorView.hidesWhenStopped = YES;
        // 加载中
        loadingLab = [[UILabel alloc] initWithFrame:CGRectMake(0, LEEContentHeight / 2.0 - 20, LEESWidth, 20)];
        [scrollV addSubview:loadingLab];
        loadingLab.text = @&quot;Loading&quot;;
        loadingLab.textColor = LEEHexColor(0xcccccc, 1.0);
        loadingLab.textAlignment = NSTextAlignmentCenter;
        loadingLab.font = [UIFont systemFontOfSize:18];
         */
        
        [self showHud];
        SDWebImageDownloader *downloader = [SDWebImageDownloader sharedDownloader];
        downloader.config.downloadTimeout = 10.0;  //设置下载超时:10秒
        [downloader downloadImageWithURL:[NSURL URLWithString:_imgURL]
                                 options:0
                                progress:^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {
                                    // progression tracking code
                                }
                               completed:^(UIImage *image, NSData *data, NSError *error, BOOL finished) {
                                   [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
                                   [self hidHud];
                                   if(error) {
                                       //延迟 1秒 显示下载失败提示
                                       dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                                           self-&amp;gt;scrollV.hidden = YES;
                                           self-&amp;gt;errorV.hidden = NO;
                                       });
                                   }
                                   if (image &amp;amp;&amp;amp; finished) {
                                       [[SDImageCache sharedImageCache] storeImage:image forKey:self-&amp;gt;_imgKey toDisk:NO completion:nil];
                                       dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                                           //self-&amp;gt;loadingLab.hidden = YES;
                                           //[self-&amp;gt;activityIndicatorView stopAnimating];
                                           //[self-&amp;gt;activityIndicatorView removeFromSuperview];
                                           CGFloat imgH = [self imageContentHeight:image];
                                           self-&amp;gt;scrollV.contentSize = CGSizeMake(LEESWidth, imgH);
                                           if (imgH &amp;lt; LEEContentHeight) { // 不是长图片时，居中显示
                                               self-&amp;gt;imgV = [[LargeImageView alloc] initWithFrame:CGRectMake(0, LEEContentHeight / 2 - imgH / 2, LEESWidth, imgH)];
                                           } else {  // 长图片时铺满 scrollView
                                               self-&amp;gt;imgV = [[LargeImageView alloc] initWithFrame:CGRectMake(0, 0, LEESWidth, imgH)];
                                           }
                                           [self-&amp;gt;imgV setImage:image];
                                           self-&amp;gt;imgV.contentMode = UIViewContentModeScaleAspectFill;
                                           [self-&amp;gt;scrollV addSubview:self-&amp;gt;imgV];
                                       });
                                   }
                               }];
    }
}

- (void)viewUpdate {
    
    [self.view.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self layoutView];
    });
}

- (void)dealloc {
    NSLog(@&quot;%@ 类 dealloc&quot;,[self class]);
    //SDImageCache *canche = [SDImageCache sharedImageCache];
    //canche.config.shouldDecompressImages = SDImageCacheOldShouldDecompressImages;
    
    //SDWebImageDownloader *downloder = [SDWebImageDownloader sharedDownloader];
    //downloder.shouldDecompressImages = SDImagedownloderOldShouldDecompressImages;
}

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;breaker&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;largeimage&quot;&gt;二、加载大图部分&lt;/h3&gt;

&lt;p&gt;LargeImageView 处理大图加载，避免占用过多内存&lt;/p&gt;

&lt;h5&gt;头文件 &quot;LargeImageView.h&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;

@interface LargeImageView : UIView

- (void)setImage:(UIImage *)image;

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;实现文件 &quot;LargeImageView.m&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#import &quot;LargeImageView.h&quot;

@interface LargeImageView ()
{
    long long tiledCount;
    UIImage *originImage;
    CGRect imageRect;
    CGFloat imageScale_w;
    CGFloat imageScale_h;
}
@end

@implementation LargeImageView

- (void)setImage:(UIImage *)image {
    if (tiledCount == 0) {
        tiledCount = 81;
    }
    originImage = image;
    [self setBackgroundColor:[UIColor whiteColor]];
    imageRect = CGRectMake(0.0f,
                           0.0f,
                           CGImageGetWidth(originImage.CGImage),
                           CGImageGetHeight(originImage.CGImage));
    imageScale_w = self.frame.size.width/imageRect.size.width;
    imageScale_h = self.frame.size.height/imageRect.size.height;
    CATiledLayer *tiledLayer = (CATiledLayer *)[self layer];
    
    int scale = (int)MAX(1/imageScale_w, 1/imageScale_h);
    
    int lev = ceil(scale);
    tiledLayer.levelsOfDetail = 1;
    tiledLayer.levelsOfDetailBias = lev;
    
    if (tiledCount &amp;gt; 0){
        NSInteger tileSizeScale = sqrt(tiledCount)/2;
        CGSize tileSize = self.bounds.size;
        tileSize.width /=tileSizeScale;
        tileSize.height /=tileSizeScale;
        tiledLayer.tileSize = tileSize;
    }
}

+ (Class)layerClass {
    return [CATiledLayer class];
}

- (void)drawRect:(CGRect)rect {
    @autoreleasepool {
        CGRect imageCutRect = CGRectMake(rect.origin.x / imageScale_w,
                                         rect.origin.y / imageScale_h,
                                         rect.size.width / imageScale_w,
                                         rect.size.height / imageScale_h);
        CGImageRef imageRef = CGImageCreateWithImageInRect(originImage.CGImage, imageCutRect);
        UIImage *tileImage = [UIImage imageWithCGImage:imageRef];
        CGContextRef context = UIGraphicsGetCurrentContext();
        UIGraphicsPushContext(context);
        [tileImage drawInRect:rect];
        CGImageRelease(imageRef);
        UIGraphicsPopContext();
    }
}

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="project" /><category term="iOS" /><summary type="html">Summary</summary></entry><entry><title type="html">iOS简单的MVC模式实现(一)</title><link href="http://localhost:4000/ios-mvc-demo-one/" rel="alternate" type="text/html" title="iOS简单的MVC模式实现(一)" /><published>2019-03-15T11:00:00+08:00</published><updated>2019-03-15T11:00:00+08:00</updated><id>http://localhost:4000/ios-mvc-demo-one</id><content type="html" xml:base="http://localhost:4000/ios-mvc-demo-one/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)
的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集
到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。

    本文将简单介绍 iOS 下 MVC模式 的实现，以及SDWebimage，MJRefresh，SDAutoLayout的
简单使用，此外还有加载大图时避免占用过多内存的处理方法。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MJRefresh的使用在第三部分，SDWebImage 以及 SDAutoLayout 的使用将在&lt;a href=&quot;https://www.yuanlee.cc/ios-mvc-demo-two/&quot;&gt;下一篇文章&lt;/a&gt;介绍。&lt;/p&gt;

&lt;p&gt;Demo Github 地址: &lt;a href=&quot;https://github.com/yuanlee0214/iOS-MVC-Demo&quot;&gt;https://github.com/yuanlee0214/iOS-MVC-Demo&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;目录&quot;&gt;目录&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#model&quot;&gt;Ⅰ.Model 部分&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#view&quot;&gt;Ⅱ.View 部分&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#controller&quot;&gt;Ⅲ.Controller 部分&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;model&quot;&gt;一、Model 部分&lt;/h3&gt;

&lt;p&gt;设置 TableViewCell 的 Model&lt;/p&gt;

&lt;h5&gt;头文件 &quot;LEECellModel.h&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface LEECellModel : NSObject

@property (nonatomic, copy) NSString *title;
@property (nonatomic, copy) NSString *imgName;

- (instancetype)initWithTitle:(NSString *)title
                      imgName:(NSString *)imgName;

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;实现文件 &quot;LEECellModel.m&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#import &quot;LEECellModel.h&quot;

@implementation LEECellModel
- (instancetype)initWithTitle:(NSString *)title
                      imgName:(NSString *)imgName {
    if (self = [super init]) {
        _title = title;
        _imgName = imgName;
    }
    return self;
}

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;breaker&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;view&quot;&gt;二、View 部分&lt;/h3&gt;

&lt;p&gt;设置 TableViewCell 的 样式&lt;/p&gt;

&lt;h5&gt;头文件 &quot;LEETableViewCell.h&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;
#import &quot;LEECellModel.h&quot;

@interface LEETableViewCell : UITableViewCell
@property (nonatomic, weak) UIImageView *imgView;
@property (nonatomic, weak) UILabel *titleLabel;

/**
 界面布局
 */
- (void)layoutView;

/**
 设置模型
 */
- (void)setModel:(LEECellModel *)model;

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;实现文件 &quot;LEETableViewCell.m&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#import &quot;LEETableViewCell.h&quot;

@implementation LEETableViewCell

- (instancetype)initWithStyle:(UITableViewCellStyle)style
              reuseIdentifier:(NSString *)reuseIdentifier {
    self = [super initWithStyle:style
                reuseIdentifier:reuseIdentifier];
    if (self) {
        [self layoutView];
    }
    return self;
}

- (void)layoutView {
    
    // titleLabel
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(30, 0, 200, 45)];
    titleLabel.font = [UIFont systemFontOfSize:autoScaleF(17)];
    titleLabel.textColor = LEEHexColor(0x333333, 1.0);
    titleLabel.textAlignment = NSTextAlignmentLeft;
    [self.contentView addSubview:titleLabel];
    _titleLabel = titleLabel;
    
    // imgV
    UIImageView *imgView = [[UIImageView alloc] init];
    imgView.frame = CGRectMake(LEESWidth - autoScaleH(50), 9, 27, 27);
    [self.contentView addSubview:imgView];
    _imgView = imgView;
}

- (void)setModel:(LEECellModel *)model {
    UIImage *image;
    if (model.imgName.length &amp;gt; 0) {
        image = [UIImage imageNamed:model.imgName];
    }
    _imgView.image = image;

    _titleLabel.text = model.title;
}

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;breaker&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;controller&quot;&gt;三、Controller 部分&lt;/h3&gt;

&lt;p&gt;设置 MainViewController&lt;/p&gt;

&lt;h5&gt;头文件 &quot;MainViewController.h&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;

@interface MainViewController : UIViewController

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;实现文件 &quot;MainViewController.m&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#import &quot;MJRefresh.h&quot;
#import &quot;LEEDetailVC.h&quot;
#import &quot;LEECellModel.h&quot;
#import &quot;UIImage+Color.h&quot;
#import &quot;LEETableViewCell.h&quot;
#import &quot;MainViewController.h&quot;
#import &quot;LEEDemoForMVC-Swift.h&quot;

@interface MainViewController () &amp;lt;UITableViewDelegate, UITableViewDataSource&amp;gt;
@property (nonatomic, strong) NSArray *titleArray;
@property (nonatomic, strong) UITableView *tableView;
@property (nonatomic, strong) NSMutableArray *dataSource;
@end

@implementation MainViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    [self layoutView];
    [self initDataSource];
}

#pragma mark -- TableView Delegate
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return self.dataSource.count;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    NSMutableArray *array = self.dataSource[section];
    return array.count;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return 35;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return 45;
}

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section {
    return CGFLOAT_MIN;
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    static NSString *headerIdentifier = @&quot;headerView&quot;;
    UITableViewHeaderFooterView *headerView = [tableView dequeueReusableHeaderFooterViewWithIdentifier:headerIdentifier];
    if (!headerView) {
        headerView = [[UITableViewHeaderFooterView alloc] initWithReuseIdentifier:headerIdentifier];
        //headerView.backgroundColor = LEEHexColor(0xeeeeee, 1.0);
        headerView.backgroundView = [[UIImageView alloc] initWithImage:[UIImage imageWithColor:LEEHexColor(0xeeeeee, 1.0)]];
        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(15, 0, LEESWidth - 30, 35)];
        label.tag = 1001;
        label.textColor = LEEHexColor(0x333333, 1.0);
        label.font = [UIFont systemFontOfSize:autoScaleF(16)];
        label.textAlignment = NSTextAlignmentLeft;
        [headerView addSubview:label];
    }
    
    UILabel *label = (UILabel *)[headerView viewWithTag:1001];
    label.text = self.titleArray[section];
    
    return headerView;
}

- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section {
    return [[UIView alloc] init];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    LEETableViewCell *cell;
    cell = [tableView dequeueReusableCellWithIdentifier:NSStringFromClass([LEETableViewCell class])];
    if (!cell) {
        cell = [[LEETableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:NSStringFromClass([LEETableViewCell class])];
    }
    LEECellModel *model;
    
    if (self.dataSource.count) {
        NSDictionary *dic = self.dataSource[indexPath.section][indexPath.row];
        if (dic[@&quot;model&quot;]) {
            model = dic[@&quot;model&quot;];
        }
    }
    [cell setModel:model];
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    if (indexPath.section &amp;lt; 3) {
        LEEDetailVC *detailVC = [[LEEDetailVC alloc] init];
        if (self.dataSource.count) {
            NSDictionary *dic = self.dataSource[indexPath.section][indexPath.row];
            if (dic[@&quot;imgName&quot;]) {
                detailVC.imgName = dic[@&quot;imgName&quot;];
            }
            if (dic[@&quot;imgKey&quot;]) {
                detailVC.imgKey = dic[@&quot;imgKey&quot;];
            }
            if (dic[@&quot;imgURL&quot;]) {
                detailVC.imgURL = dic[@&quot;imgURL&quot;];
            }
        }
        [self.navigationController pushViewController:detailVC animated:YES];
    } else {
        LEESwiftVC *swift = [[LEESwiftVC alloc] init];
        [self.navigationController pushViewController:swift animated:YES];
    }
}

- (void)initDataSource {
    [_dataSource removeAllObjects];
    
    // 三个网络大图 Section 0
    LEECellModel *model01 = [[LEECellModel alloc] initWithTitle:@&quot;NetImg 1&quot; imgName:@&quot;pic1&quot;];
    NSString *imgURL01 = @&quot;http://www.wanwenku.com/uploadfile/2016/0616/20160616111704532.jpg&quot;;
    NSDictionary *dic01 = @{@&quot;model&quot;:model01, @&quot;imgKey&quot;:@&quot;NetImg 1&quot;, @&quot;imgURL&quot;:imgURL01, @&quot;imgName&quot;:@&quot;&quot;};
    
    LEECellModel *model02 = [[LEECellModel alloc] initWithTitle:@&quot;NetImg 2&quot; imgName:@&quot;pic2&quot;];
    NSString *imgURL02 = @&quot;http://www.wanwenku.com/uploadfile/2016/0528/20160528125916910.jpg&quot;;
    NSDictionary *dic02 = @{@&quot;model&quot;:model02, @&quot;imgKey&quot;:@&quot;NetImg 2&quot;, @&quot;imgURL&quot;:imgURL02, @&quot;imgName&quot;:@&quot;&quot;};
    
    LEECellModel *model03 = [[LEECellModel alloc] initWithTitle:@&quot;NetImg 3&quot; imgName:@&quot;pic3&quot;];
    NSString *imgURL03 = @&quot;http://www.wanwenku.com/uploadfile/2016/0514/20160514120203208.jpg&quot;;
    NSDictionary *dic03 = @{@&quot;model&quot;:model03, @&quot;imgKey&quot;:@&quot;NetImg 3&quot;, @&quot;imgURL&quot;:imgURL03, @&quot;imgName&quot;:@&quot;&quot;};
    NSMutableArray *array1 = [NSMutableArray arrayWithObjects:dic01, dic02, dic03, nil];
    
    // 两个本地大图 Section 1
    LEECellModel *model11 = [[LEECellModel alloc] initWithTitle:@&quot;LocalImg 1&quot; imgName:@&quot;pic4&quot;];
    NSDictionary *dic11 = @{@&quot;model&quot;:model11, @&quot;imgKey&quot;:@&quot;LocalImg 1&quot;, @&quot;imgURL&quot;:@&quot;&quot;, @&quot;imgName&quot;:@&quot;BigPic1&quot;}; // 这张图片10M, 加载起来很慢
    
    LEECellModel *model12 = [[LEECellModel alloc] initWithTitle:@&quot;LocalImg 2&quot; imgName:@&quot;pic5&quot;];
    NSDictionary *dic12 = @{@&quot;model&quot;:model12, @&quot;imgKey&quot;:@&quot;LocalImg 2&quot;, @&quot;imgURL&quot;:@&quot;&quot;, @&quot;imgName&quot;:@&quot;BigPic2&quot;}; // 这张图片5M, 加载起来速度尚可
    NSMutableArray *array2 = [NSMutableArray arrayWithObjects:dic11, dic12, nil];
    
    // 网络长图 Section 2
    LEECellModel *model31 = [[LEECellModel alloc] initWithTitle:@&quot;NetLongImg&quot; imgName:@&quot;pic6&quot;];
    NSDictionary *dic31 = @{@&quot;model&quot;:model31, @&quot;imgKey&quot;:@&quot;LongImg&quot;, @&quot;imgURL&quot;:@&quot;http://ww2.sinaimg.cn/large/bd2fd49bgw1e26kv4tyqwj.jpg&quot;, @&quot;imgName&quot;:@&quot;&quot;};
    NSMutableArray *array3 = [NSMutableArray arrayWithObjects:dic31, nil];
    
    // Swift Section 3
    LEECellModel *model41 = [[LEECellModel alloc] initWithTitle:@&quot;Swift&quot; imgName:@&quot;swift&quot;];
    NSDictionary *dic41 = @{@&quot;model&quot;:model41, @&quot;imgKey&quot;:@&quot;&quot;, @&quot;imgURL&quot;:@&quot;&quot;, @&quot;imgName&quot;:@&quot;&quot;};
    NSMutableArray *array4 = [NSMutableArray arrayWithObjects:dic41, nil];
    
    [self.dataSource addObject:array1];
    [self.dataSource addObject:array2];
    [self.dataSource addObject:array3];
    [self.dataSource addObject:array4];
    
    [self.tableView reloadData];
}

#pragma mark -- 公有方法
- (void)layoutView {
    self.view.backgroundColor = LEEHexColor(0xffffff, 1.0);
    self.navigationItem.title = @&quot;YuanLee&quot;;
    
    //UIBarButtonItem *backBtn = [[UIBarButtonItem alloc] init];
    //backBtn.title = @&quot;返回&quot;;
    // 修改导航栏上返回按钮上的文字，注意这里的self是父ViewController,不是即将显示的子ViewController
    //self.navigationItem.backBarButtonItem = backBtn;
    
    UITableView *tableView = [[UITableView alloc] initWithFrame:self.view.bounds
                                                          style:UITableViewStyleGrouped];
    tableView.delegate = self;
    tableView.dataSource = self;
    // 消除 cell 的线与屏幕边缘的距离
    tableView.separatorInset = UIEdgeInsetsMake(0, 0, 0, 0);
    tableView.backgroundColor = LEEHexColor(0xffffff, 1.0);
    tableView.separatorColor = LEEHexColor(0xcccccc, 1.0);
    [self.view addSubview:tableView];
    _tableView = tableView;
    
    // 使用 MJRefresh 实现 TableView 的下拉刷新
    // 设置回调（一旦进入刷新状态，就调用target的action，也就是调用self的loadNewData方法）
    MJRefreshNormalHeader *header = [MJRefreshNormalHeader headerWithRefreshingTarget:self refreshingAction:@selector(refreshData)];
    //提示内容
    [header setTitle:@&quot;Pull Down To Refresh&quot; forState:MJRefreshStateIdle];
    [header setTitle:@&quot;Release To Refresh&quot; forState:MJRefreshStatePulling];
    [header setTitle:@&quot;Refreshing&quot; forState:MJRefreshStateRefreshing];
    // 设置自动切换透明度(在导航栏下面自动隐藏)
    header.automaticallyChangeAlpha = YES;
    // 隐藏时间
    header.lastUpdatedTimeLabel.hidden = YES;
    // 马上进入刷新状态
    [header beginRefreshing];
    // 设置header
    self.tableView.mj_header = header;
}

- (void)viewUpdate {
    [_tableView reloadData];
    [(MJRefreshNormalHeader *)_tableView.mj_header setTitle:@&quot;Pull Down To Refresh&quot; forState:MJRefreshStateIdle];
    [(MJRefreshNormalHeader *)_tableView.mj_header setTitle:@&quot;Release To Refresh&quot; forState:MJRefreshStatePulling];
    [(MJRefreshNormalHeader *)_tableView.mj_header setTitle:@&quot;Refreshing&quot; forState:MJRefreshStateRefreshing];
}

- (void)refreshData
{
    [self showHudWithText:@&quot;Loading...&quot;];
    //[self showHudInWindowWithText:@&quot;Loading...&quot;];
    
    //1秒后刷新表格UI
    __weak UITableView *tableView = self.tableView;
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        
        //[MBProgressHUD hideHUDForView:self.view.window animated:YES];
        //[hud hideAnimated:YES afterDelay:0.5];
        [self.hud hideAnimated:YES afterDelay:0.5];
        
        // 刷新表格
        [tableView reloadData];
        
        // 拿到当前的下拉刷新控件，结束刷新状态
        [tableView.mj_header endRefreshing];
    });
}

- (NSMutableArray *)dataSource {
    if (!_dataSource) {
        _dataSource = [NSMutableArray array];
    }
    return _dataSource;
}

- (NSArray *)titleArray {
    if (!_titleArray) {
        _titleArray = @[@&quot;网络大图&quot;, @&quot;本地大图&quot;, @&quot;网络长图&quot;, @&quot;Swift&quot;];
    }
    return _titleArray;
}


@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="project" /><category term="iOS" /><summary type="html">Summary</summary></entry><entry><title type="html">Shadowsocks</title><link href="http://localhost:4000/shadowsocks/" rel="alternate" type="text/html" title="Shadowsocks" /><published>2019-03-10T15:00:00+08:00</published><updated>2019-03-10T15:00:00+08:00</updated><id>http://localhost:4000/shadowsocks</id><content type="html" xml:base="http://localhost:4000/shadowsocks/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Shadowsocks 部署过程记录&lt;/p&gt;

&lt;h4 id=&quot;目录&quot;&gt;目录&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#shadowsocks-server&quot;&gt;Ⅰ.Shadowsocks Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#chacha20-encryption&quot;&gt;Ⅱ.ChaCha20 Encryption&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installation-of-pip3&quot;&gt;Ⅲ.Installation of Pip3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;shadowsocks-server&quot;&gt;一、Ubuntu 16.04 下 Shadowsocks服务器端安装及优化&lt;/h3&gt;

&lt;h4&gt;前言&lt;/h4&gt;

&lt;p&gt;本教程旨在提供简明的Ubuntu 16.04下安装服务器端Shadowsocks。不同于Ubuntu 16.04之前的教程，本文抛弃initd，转而使用Ubuntu 16.04支持的Systemd管理Shadowsocks的启动与停止，显得更为便捷。优化部分包括BBR、TCP Fast Open以及吞吐量优化。&lt;/p&gt;

&lt;p&gt;本教程仅适用于Ubuntu 16.04及之后的版本，基于Python 3，支持IPv6。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4&gt;1.安装pip&lt;/h4&gt;
&lt;p&gt;本教程使用Python 3为载体，因Python 3对应的包管理器pip3并未预装，首先安装pip3：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo apt install python3-pip&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;PS：此步骤若无效则跳转至本文第三部分(&lt;a href=&quot;#installation-of-pip3&quot;&gt;点我立即跳转&lt;/a&gt;)查看具体安装步骤&lt;/p&gt;

&lt;h4&gt;2.安装Shadowsocks&lt;/h4&gt;

&lt;p&gt;因Shadowsocks作者不再维护pip中的Shadowsocks（定格在了2.8.2），我们使用下面的命令来安装最新版的Shadowsocks：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;安装完成后可以使用下面这个命令查看Shadowsocks版本：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo ssserver --version&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;目前会显示“Shadowsocks 3.0.0”。&lt;/p&gt;

&lt;h4&gt;3.创建配置文件&lt;/h4&gt;

&lt;p&gt;创建Shadowsocks配置文件所在文件夹：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo mkdir /etc/shadowsocks&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后创建配置文件：sudo nano /etc/shadowsocks/config.json复制粘贴如下内容（注意修改密码“password”）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;{
&quot;server&quot;:&quot;::&quot;,
&quot;server_port&quot;:8388,
&quot;local_address&quot;: &quot;127.0.0.1&quot;,
&quot;local_port&quot;:1080,
&quot;password&quot;:&quot;mypassword&quot;,
&quot;timeout&quot;:300,
&quot;method&quot;:&quot;aes-256-cfb&quot;,
&quot;fast_open&quot;: false
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后按Ctrl + O保存文件，Ctrl + X退出。&lt;/p&gt;

&lt;h4&gt;4.测试Shadowsocks配置首先记录下服务器的IP地址&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;ifconfig&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后来测试下Shadowsocks能不能正常工作了：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;ssserver -c /etc/shadowsocks/config.json&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在Shadowsocks客户端添加服务器，地址填写IPv4地址或IPv6地址，端口号为8388，加密方法为aes-256-cfb，密码为设置的密码。然后设置客户端使用全局模式，浏览器登录Google试试应该能直接打开了。&lt;/p&gt;

&lt;p&gt;这时浏览器登录&lt;a href=&quot;http://ip138.com&quot;&gt;http://ip138.com&lt;/a&gt;就会显示Shadowsocks服务器的IP啦！&lt;/p&gt;

&lt;p&gt;测试完毕，按Ctrl + C关闭Shadowsocks。&lt;/p&gt;

&lt;h4&gt;5.配置Systemd管理Shadowsocks&lt;/h4&gt;

&lt;p&gt;新建Shadowsocks管理文件&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo nano /etc/systemd/system/shadowsocks-server.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;复制粘贴：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;[Unit]
Description=Shadowsocks Server
After=network.target

[Service]
ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json
Restart=on-abort

[Install]
WantedBy=multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ctrl + O保存文件，Ctrl + X退出。&lt;/p&gt;

&lt;p&gt;启动Shadowsocks：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo systemctl start shadowsocks-server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;设置开机启动Shadowsocks：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo systemctl enable shadowsocks-server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;至此，Shadowsock服务器端的基本配置已经全部完成了！&lt;/p&gt;

&lt;h4&gt;6.优化&lt;/h4&gt;

&lt;p&gt;这部分属于进阶操作，在你使用Shadowsocks时感觉到延迟较大，或吞吐量较低时，可以考虑对服务器端进行优化。&lt;/p&gt;

&lt;p&gt;开启BBR&lt;/p&gt;

&lt;p&gt;BBR系Google最新开发的TCP拥塞控制算法，目前有着较好的带宽提升效果，甚至不比老牌的锐速差。&lt;/p&gt;

&lt;h5&gt;1) 升级Linux内核&lt;/h5&gt;

&lt;p&gt;BBR在Linux kernel 4.9引入。首先检查服务器kernel版本：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;uname -r&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果其显示版本在4.9.0之下，则需要升级Linux内核，否则请忽略下文。&lt;/p&gt;

&lt;p&gt;更新包管理器：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo apt update&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;查看可用的Linux内核版本：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo apt-cache showpkg linux-image&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;找到一个你想要升级的Linux内核版本，如“linux-image-4.18.0-16-generic”：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo apt install linux-image-4.18.0-16-generic&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;等待安装完成后重启服务器：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo reboot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;删除老的Linux内核：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo purge-old-kernels&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;2) 开启BBR&lt;/h5&gt;

&lt;p&gt;运行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;lsmod | grep bbr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果结果中没有tcp_bbr，则先运行：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;modprobe tcp_bbr
echo &quot;tcp_bbr&quot; &amp;gt;&amp;gt; /etc/modules-load.d/modules.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;echo &quot;net.core.default_qdisc=fq&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &amp;gt;&amp;gt; /etc/sysctl.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sysctl -p&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;保存生效。运行：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sysctl net.ipv4.tcp_available_congestion_control
sysctl net.ipv4.tcp_congestion_control&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;若均有bbr，则开启BBR成功。&lt;/p&gt;

&lt;h5&gt;3) 优化吞吐量&lt;/h5&gt;

&lt;p&gt;新建配置文件：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo nano /etc/sysctl.d/local.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;复制粘贴：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;# max open files
fs.file-max = 51200
# max read buffer
net.core.rmem_max = 67108864
# max write buffer
net.core.wmem_max = 67108864
# default read buffer
net.core.rmem_default = 65536
# default write buffer
net.core.wmem_default = 65536
# max processor input queue
net.core.netdev_max_backlog = 4096
# max backlog
net.core.somaxconn = 4096

# resist SYN flood attacks
net.ipv4.tcp_syncookies = 1
# reuse timewait sockets when safe
net.ipv4.tcp_tw_reuse = 1
# turn off fast timewait sockets recycling
net.ipv4.tcp_tw_recycle = 0
# short FIN timeout
net.ipv4.tcp_fin_timeout = 30
# short keepalive time
net.ipv4.tcp_keepalive_time = 1200
# outbound port range
net.ipv4.ip_local_port_range = 10000 65000
# max SYN backlog
net.ipv4.tcp_max_syn_backlog = 4096
# max timewait sockets held by system simultaneously
net.ipv4.tcp_max_tw_buckets = 5000
# turn on TCP Fast Open on both client and server side
net.ipv4.tcp_fastopen = 3
# TCP receive buffer
net.ipv4.tcp_rmem = 4096 87380 67108864
# TCP write buffer
net.ipv4.tcp_wmem = 4096 65536 67108864
# turn on path MTU discovery
net.ipv4.tcp_mtu_probing = 1

net.ipv4.tcp_congestion_control = bbr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sysctl --system&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;编辑之前的shadowsocks-server.service文件：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo nano /etc/systemd/system/shadowsocks-server.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在ExecStart前插入一行，内容为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;ExecStartPre=/bin/sh -c 'ulimit -n 51200'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;即修改后的shadowsocks-server.service内容为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;[Unit]
Description=Shadowsocks Server
After=network.target

[Service]
ExecStartPre=/bin/sh -c 'ulimit -n 51200'
ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json
Restart=on-abort

[Install]
WantedBy=multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ctrl + O保存文件，Ctrl + X退出。&lt;/p&gt;

&lt;p&gt;重载shadowsocks-server.service：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重启Shadowsocks：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo systemctl restart shadowsocks-server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;4) 开启TCP Fast Open&lt;/h5&gt;

&lt;p&gt;TCP Fast Open可以降低Shadowsocks服务器和客户端的延迟。实际上在上一步已经开启了TCP Fast Open，现在只需要在Shadowsocks配置中启用TCP Fast Open。&lt;/p&gt;

&lt;p&gt;编辑config.json：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo nano /etc/shadowsocks/config.json&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;将fast_open的值由false修改为true。&lt;/p&gt;

&lt;p&gt;Ctrl + O保存文件，Ctrl + X退出。&lt;/p&gt;

&lt;p&gt;重启Shadowsocks：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo systemctl restart shadowsocks-server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;注意：TCP Fast Open同时需要客户端的支持，即客户端Linux内核版本为3.7.1及以上；你可以在Shadowsocks客户端中启用TCP Fast Open。
至此，Shadowsock服务器端的优化已经全部完成了！&lt;/p&gt;

&lt;div class=&quot;breaker&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;chacha20-encryption&quot;&gt;二、Ubuntu 16.04 安装libsodium库支持chacha20加密方式&lt;/h3&gt;

&lt;h4&gt;&lt;span class=&quot;evidence&quot;&gt;PS：此步骤并非必须步骤。&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;因为chacha20加密方式的安全性与aes-256-cfb相近，但效率比aes-256-cfb高，所以推荐启用chacha20加密。libsodium是给Shadowsocks提供chacha20、salsa20、chacha20-ietf等高级加密所必须的扩展库。&lt;/h5&gt;

&lt;h4&gt;1.安装依赖&lt;/h4&gt;

&lt;p&gt;Debian 7/8、Ubuntu 14/15/16 及其衍生系列：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo apt-get update
sudo apt-get install build-essential wget -y&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;2.下载 libsodium 最新版本&lt;/h4&gt;

&lt;p&gt;可以从libsodium 官网下，也可以从github下载。选择速度最快的下载方式。&lt;/p&gt;

&lt;h5&gt;1) 从官网下载：&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;2) 从 github 下载（其中 1.0.10 是 libusodium 的版本号，可以改成最新的）:&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;wget https://github.com/jedisct1/libsodium/releases/download/1.0.10/libsodium-1.0.10.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;3.解压&lt;/h4&gt;

&lt;h5&gt;1) 官网下载的：&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;tar xzvf LATEST.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;2) github 下载的：&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;tar xzvf libsodium-1.0.10.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;4.生成配置文件&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;cd libsodium*
./configure&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;5.编译并安装&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;make -j8 &amp;amp;&amp;amp; make install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;6.添加运行库位置并加载运行库：&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;echo /usr/local/lib &amp;gt; /etc/ld.so.conf.d/usr_local_lib.conf
ldconfig&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;7.编辑之前的shadowsocks的config.json文件&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo nano /etc/shadowsocks/config.json&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;将加密方式由之前的aes-256-cfb改为chacha20即可，即修改后的shadowsocks/config.json文件的内容为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;{
&quot;server&quot;:&quot;::&quot;,
&quot;server_port&quot;:8388,
&quot;local_address&quot;: &quot;127.0.0.1&quot;,
&quot;local_port&quot;:1080,
&quot;password&quot;:&quot;mypassword&quot;,
&quot;timeout&quot;:300,
&quot;method&quot;:&quot;chacha20&quot;,
&quot;fast_open&quot;: true
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;breaker&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;installation-of-pip3&quot;&gt;三、Ubuntu 16.04 安装pip3&lt;/h3&gt;

&lt;p&gt;系统本身自带python3&lt;/p&gt;

&lt;p&gt;查看是否安装了pip3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;pip3 -v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然而却出现了 E: Unable to locate package python3-pip 错误，原因很简单，就是自带的源没有找到python3-pip这个包，执行下面的语句更新源即可&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;# 更新一下源
sudo apt update&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;更新好源后，再次执行 sudo apt install python3-pip 便能下载安装了。
到这里pip算是装好，但如果你在执行 pip3 -V 后报以下异常的话，可以执行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;sudo apt install python3-distutils&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;试试。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;Traceback (most recent call last):
File &quot;/usr/bin/pip3&quot;, line 9, in &amp;lt;module&amp;gt;
from pip import main
File &quot;/usr/lib/python3/dist-packages/pip/__init__.py&quot;, line 14, in &amp;lt;module&amp;gt;
from pip.utils import get_installed_distributions, get_prog
File &quot;/usr/lib/python3/dist-packages/pip/utils/__init__.py&quot;, line 23, in &amp;lt;module&amp;gt;
from pip.locations import (
File &quot;/usr/lib/python3/dist-packages/pip/locations.py&quot;, line 9, in &amp;lt;module&amp;gt;
from distutils import sysconfig
ImportError: cannot import name 'sysconfig'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="blog" /><category term="Shadowsocks" /><summary type="html">Summary</summary></entry><entry><title type="html">iOS加载大图避免占用过多内存</title><link href="http://localhost:4000/ios-large-image/" rel="alternate" type="text/html" title="iOS加载大图避免占用过多内存" /><published>2019-03-09T12:00:00+08:00</published><updated>2019-03-09T12:00:00+08:00</updated><id>http://localhost:4000/ios-large-image</id><content type="html" xml:base="http://localhost:4000/ios-large-image/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;在需要加载大图的时候，创建 imageView 继承自此 LargeImageView 即可&lt;/p&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;h4 id=&quot;首先分析一下图片加载到内存的大小的计算方法&quot;&gt;首先分析一下图片加载到内存的大小的计算方法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果是位图，则位图多大，加载到内存中所占用的空间就是多大&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果是非位图的图片，比如jpg/png,则需要解码成位图，解码出来的位图多大也就是意味着该jpg/png占用内存多大。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;位图的大小计算公式：图片 width x heigth x 4（ARGB）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;比如一张 1000 x 1000 的png图片，则其解压出来的位图的占用大小为1000 x 1000 x 4(即3.81MB左右)，也就是说这张图片会占用3.81MB左右的内存。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;apple官方的解决办法&quot;&gt;Apple官方的解决办法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;把大图片进行分片加载。根据原图的分片CGRect获取到原图的一个小分片p1，根据缩放后的分片CGRect和 p1生成缩放后的小分片，绘制到屏幕，这样一直循环把原图片全部的每个小分片全部生成对应缩放的小分片，然后绘制。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4&gt;在需要加载大图的时候，创建 imageView 继承自此 LargeImageView 即可&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;LargeImageView *imageView = [LargeImageView new];
[imageView setImage:image];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;头文件 &quot;LargeImageView.h&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;//
//  LargeImageView.h
//
//  Created by YuanLee on 2019/3/9.
//  Copyright © 2019 YuanLee. All rights reserved.
//

#import &amp;lt;UIKit/UIKit.h&amp;gt;

NS_ASSUME_NONNULL_BEGIN

@interface LargeImageView : UIView
- (void)setImage:(UIImage *)image;
@end

NS_ASSUME_NONNULL_END&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;实现文件 &quot;LargeImageView.m&quot;&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;//
//  LargeImageView.m
//
//  Created by YuanLee on 2019/3/9.
//  Copyright © 2019 YuanLee. All rights reserved.
//

#import &quot;LargeImageView.h&quot;

@interface LargeImageView ()
{
    long long tiledCount;
    UIImage *originImage;
    CGRect imageRect;
    CGFloat imageScale_w;
    CGFloat imageScale_h;
}
@end

@implementation LargeImageView

- (void)setImage:(UIImage *)image {
    if (tiledCount == 0) {
        tiledCount = 81;
    }
    originImage = image;
    [self setBackgroundColor:[UIColor whiteColor]];
    imageRect = CGRectMake(0.0f,
                           0.0f,
                           CGImageGetWidth(originImage.CGImage),
                           CGImageGetHeight(originImage.CGImage));
    imageScale_w = self.frame.size.width/imageRect.size.width;
    imageScale_h = self.frame.size.height/imageRect.size.height;
    CATiledLayer *tiledLayer = (CATiledLayer *)[self layer];
    
    int scale = (int)MAX(1/imageScale_w, 1/imageScale_h);
    
    int lev = ceil(scale);
    tiledLayer.levelsOfDetail = 1;
    tiledLayer.levelsOfDetailBias = lev;
    
    if (tiledCount &amp;gt; 0){
        NSInteger tileSizeScale = sqrt(tiledCount)/2;
        CGSize tileSize = self.bounds.size;
        tileSize.width /=tileSizeScale;
        tileSize.height /=tileSizeScale;
        tiledLayer.tileSize = tileSize;
    }
}

+ (Class)layerClass {
    return [CATiledLayer class];
}

- (void)drawRect:(CGRect)rect {
    @autoreleasepool {
        CGRect imageCutRect = CGRectMake(rect.origin.x / imageScale_w,
                                         rect.origin.y / imageScale_h,
                                         rect.size.width / imageScale_w,
                                         rect.size.height / imageScale_h);
        CGImageRef imageRef = CGImageCreateWithImageInRect(originImage.CGImage, imageCutRect);
        UIImage *tileImage = [UIImage imageWithCGImage:imageRef];
        CGContextRef context = UIGraphicsGetCurrentContext();
        UIGraphicsPushContext(context);
        [tileImage drawInRect:rect];
        CGImageRelease(imageRef);
        UIGraphicsPopContext();
    }
}

@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="blog" /><category term="iOS" /><summary type="html">Summary</summary></entry><entry><title type="html">iOS常用宏定义</title><link href="http://localhost:4000/ios-define/" rel="alternate" type="text/html" title="iOS常用宏定义" /><published>2019-03-07T17:00:00+08:00</published><updated>2019-03-07T17:00:00+08:00</updated><id>http://localhost:4000/ios-define</id><content type="html" xml:base="http://localhost:4000/ios-define/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;iOS开发中一些常用的宏定义&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 屏幕宽高
#define LEESWidth [UIScreen mainScreen].bounds.size.width
#define LEESHeight [UIScreen mainScreen].bounds.size.height&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 颜色处理
#define LEEHsb(h, s, b) [UIColor colorWithHue:h/360.0f \
                                   saturation:s/100.0f \
                                   brightness:b/100.0f \
                                        alpha:1.0]
#define LEERgba(r, g, b, a) [UIColor colorWithRed:(r)/255.0 \
                                            green:(g)/255.0 \
                                             blue:(b)/255.0 \
                                            alpha:(a)]
#define LEEHexColor(c, a) [UIColor colorWithRed:(((c &amp;gt;&amp;gt; 16) &amp;amp; 0xFF) / 255.0) \
                                          green:(((c &amp;gt;&amp;gt; 8) &amp;amp; 0xFF) / 255.0) \
                                           blue:(((c) &amp;amp; 0xFF)/ 255.0) \
                                          alpha:a]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- NavigationBar 高度
#define LEENavigationBarHeight ([[UIApplication sharedApplication] statusBarFrame].size.height + 44.0)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- App 信息请求地址  以微信为例
#define LEERequestAppInfoUrlString @&quot;http://itunes.apple.com/lookup?id=414478124&quot;

#pragma mark -- App Store 跳转地址  以微信为例
#define LEEGotoAppStoreUrlString @&quot;https://itunes.apple.com/cn/app/wei-xin/id414478124?mt=8&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 在主线程中执行
#define LEEExcuteOnMain(block) !block ? : [[NSThread currentThread] isMainThread] ? block() : dispatch_async(dispatch_get_main_queue(), block)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 通知
#define LEENotiObserver(observer, SEL, key, anObject) [[NSNotificationCenter defaultCenter] 
                 addObserver:observer \                                                                            
                    selector:SEL \                                                                                   
                        name:key \                                                                                   
                      object:anObject]
#define LEEPostNoti(key, anObject, aUserInfo) [[NSNotificationCenter defaultCenter] 
        postNotificationName:key \                                                                              
                       bject:anObject \
                    userInfo:aUserInfo]
#define LEERemoveNoti(observer, key, anObject) [[NSNotificationCenter defaultCenter] 
              removeObserver:observer \ 
                        name:key \                                                                                      
                      object:anObject]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 字符串比较
#define isStringEqual(s1, s2) [s1 isEqualToString:s2]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 当前软件语言
#define LEELanguage LEEShareConfig.language&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 根据当前语言选文本
#define LEELocation(key) NSLocalizedStringFromTable(key, LEELanguage, nil)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 屏幕比例
#define kIPHONE_4 CGSizeEqualToSize([UIScreen mainScreen].bounds.size, CGSizeMake(320, 480))
#define kIPHONE_5_SE CGSizeEqualToSize([UIScreen mainScreen].bounds.size, CGSizeMake(320, 568))
#define kIPHONE_6_7_8 CGSizeEqualToSize([UIScreen mainScreen].bounds.size, CGSizeMake(375, 667))
#define kIPHONE_P CGSizeEqualToSize([UIScreen mainScreen].bounds.size, CGSizeMake(414, 736))
#define kIPHONE_X CGSizeEqualToSize([UIScreen mainScreen].bounds.size, CGSizeMake(375, 812))&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 弱变量转换
#define WS(sself) __weak __typeof(&amp;amp;*self)sself = self&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 占位图
#define LEEPlaceholderImg [UIImage imageNamed:@&quot;Placeholder&quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 获取图片资源
#define GetImage(imageName) [UIImage imageNamed:[NSString stringWithFormat:@&quot;%@&quot;,imageName]]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#pragma mark -- 角度转弧度
#define DegreesToRadian(x) (M_PI * (x) / 180.0)

#pragma mark -- 弧度转换角度
#define RadianToDegrees(radian) (radian*180.0)/(M_PI)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="blog" /><category term="iOS" /><summary type="html">Summary</summary></entry><entry><title type="html">iOS开发小知识总结</title><link href="http://localhost:4000/ios-little-tips/" rel="alternate" type="text/html" title="iOS开发小知识总结" /><published>2019-03-03T09:00:00+08:00</published><updated>2019-03-03T09:00:00+08:00</updated><id>http://localhost:4000/ios-little-tips</id><content type="html" xml:base="http://localhost:4000/ios-little-tips/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;iOS开发中一些常见的小知识&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1cocoapods找不到头文件&quot;&gt;1.CocoaPods找不到头文件&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;问　　题：使用CocoaPods时，import找不到头文件。&lt;/li&gt;
  &lt;li&gt;原　　因：这是因为还没设置头文件的目录。&lt;/li&gt;
  &lt;li&gt;解决办法：TARGETS——Build Setting——User Header Search Paths，
         添加CocoaPods头文件目录，目录路径直接写：${SRCROOT}，
         后边选择recursive(会在相应的目录递归搜索文件) 。&lt;/li&gt;
  &lt;li&gt;注　　意：是在User Header Search Paths里添加，不是 Header Search Paths。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2cocoapods导入头文件不提示&quot;&gt;2.CocoaPods导入头文件不提示&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;问　　题：使用CocoaPods时，import导入头文件时，不提示文件名。&lt;/li&gt;
  &lt;li&gt;原　　因：这是因为还没设置头文件的目录。&lt;/li&gt;
  &lt;li&gt;解决办法：TARGETS——Build Setting——User Header Search Paths，
      添加CocoaPods头文件目录，目录路径直接写：$(PODS_ROOT)，
      后边选择recursive (会在相应的目录递归搜索文件),就可以了。&lt;/li&gt;
  &lt;li&gt;注　　意：是在User Header Search Paths里添加，不是上面的Header Search Paths。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3跳进app权限设置&quot;&gt;3.跳进APP权限设置&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
if([[UIApplication sharedApplication] canOpenURL:url]) {
    if ([[[UIDevice currentDevice] systemVersion] floatValue] &amp;lt; 10.0) {
        // iOS 10.0 以下打开设置
        [[UIApplication sharedApplication] openURL:url];
    }else {
        // iOS 10.0 以上打开设置
        [[UIApplication sharedApplication] openURL:url
                                           options:[NSDictionary dictionary]
                                 completionHandler:^(BOOL success) {
        }];
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;4强弱引用&quot;&gt;4.强／弱引用&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define WeakSelf(type)  __weak typeof(type) weak##type = type; // weak
#define StrongSelf(type)  __strong typeof(type) type = weak##type; // strong&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;5获取图片资源&quot;&gt;5.获取图片资源&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define GetImage(imageName) [UIImage imageNamed:[NSString stringWithFormat:@&quot;%@&quot;,imageName]]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;6删除某个view所有的子视图&quot;&gt;6.删除某个view所有的子视图&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;[[someView subviews] makeObjectsPerformSelector:@selector(removeFromSuperview)];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;7设置tableview分割线颜色&quot;&gt;7.设置tableView分割线颜色&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;[self.tableView setSeparatorColor:[UIColor grayColor]];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;8消除tableviewcell分割线与屏幕边缘的距离&quot;&gt;8.消除tableViewCell分割线与屏幕边缘的距离&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;self.tableView.separatorInset = UIEdgeInsetsMake(0, 0, 0, 0);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;9修改导航栏上返回按钮上的文字&quot;&gt;9.修改导航栏上返回按钮上的文字&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;UIBarButtonItem *backBtn = [[UIBarButtonItem alloc] init];
backBtn.title = @&quot;返回&quot;;
//注意这里的self是父ViewController,不是即将显示的子ViewController
self.navigationItem.backBarButtonItem = backBtn;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;10网络请求时状态栏转圈圈开始请求时设置为yes请求结束时置为no&quot;&gt;10.网络请求时状态栏转圈圈，开始请求时设置为YES，请求结束时置为NO&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;[UIApplication sharedApplication].networkActivityIndicatorVisible = YES;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;11为项目添加全局prefixheaderpch预编译文件&quot;&gt;11.为项目添加全局PrefixHeader.pch预编译文件&lt;/h4&gt;
&lt;p&gt;在项目的配置界面选择TARGETS下的标签-&amp;gt;Build Settings-&amp;gt;搜索”prefix header”-&amp;gt;配置“prefix header”的值为：
$(SRCROOT)/ProjectName/PrefixHeader.pch。其中$(SRCROOT)是项目根路径，ProjectName与实际的项目名一致，
PrefixHeader.pch与文件名一致。另：Precompile Prefix Header 设置为 YES。&lt;/p&gt;

&lt;h4 id=&quot;12动画切换window的根控制器&quot;&gt;12.动画切换window的根控制器&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;// options是动画选项
[UIView transitionWithView:[UIApplication sharedApplication].keyWindow duration:0.5f options:UIViewAnimationOptionTransitionCrossDissolve animations:^{
        BOOL oldState = [UIView areAnimationsEnabled];
        [UIView setAnimationsEnabled:NO];
        [UIApplication sharedApplication].keyWindow.rootViewController = [RootViewController new];
        [UIView setAnimationsEnabled:oldState];
    } completion:^(BOOL finished) {
        // do something
}];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;13去除数组中重复的对象&quot;&gt;13.去除数组中重复的对象&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;NSArray *newArr = [oldArr valueForKeyPath:@“@distinctUnionOfObjects.self&quot;];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;14注意定期清理sdwebimage的本地缓存不然服务器更新原url的图片时app仍然读取本地缓存中的图片而不是重新获取新图片&quot;&gt;14.注意定期清理SDWebImage的本地缓存，不然服务器更新原URL的图片时，APP仍然读取本地缓存中的图片而不是重新获取新图片。&lt;/h4&gt;

&lt;h4 id=&quot;15获取沙盒-document&quot;&gt;15.获取沙盒 Document&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define PathDocument [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;16获取沙盒-cache&quot;&gt;16.获取沙盒 Cache&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define PathCache [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;17gcd代码只执行一次&quot;&gt;17.GCD代码只执行一次&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define kDISPATCH_ONCE_BLOCK(onceBlock) static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, onceBlock);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;18自定义nslog&quot;&gt;18.自定义NSLog&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#ifdef DEBUG
#define NSLog(fmt, ...) NSLog((@&quot;%s [Line %d] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)
#else
#define NSLog(...)
#endif&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;19自定义font&quot;&gt;19.自定义Font&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define FontL(s)             [UIFont systemFontOfSize:s weight:UIFontWeightLight]
#define FontR(s)             [UIFont systemFontOfSize:s weight:UIFontWeightRegular]
#define FontB(s)             [UIFont systemFontOfSize:s weight:UIFontWeightBold]
#define FontT(s)             [UIFont systemFontOfSize:s weight:UIFontWeightThin]
#define Font(s)              FontL(s)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;20format&quot;&gt;20.FORMAT&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define FORMAT(f, ...)      [NSString stringWithFormat:f, ## __VA_ARGS__]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;21在主线程上运行&quot;&gt;21、在主线程上运行&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define kDISPATCH_MAIN_THREAD(mainQueueBlock) dispatch_async(dispatch_get_main_queue(), mainQueueBlock);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;22开启异步线程&quot;&gt;22、开启异步线程&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define kDISPATCH_GLOBAL_QUEUE_DEFAULT(globalQueueBlock) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), globalQueueBlocl);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;23通知&quot;&gt;23.通知&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define NOTIF_ADD(n, f)     [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(f) name:n object:nil]
#define NOTIF_POST(n, o)    [[NSNotificationCenter defaultCenter] postNotificationName:n object:o]
#define NOTIF_REMV()        [[NSNotificationCenter defaultCenter] removeObserver:self]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;24获取window&quot;&gt;24.获取window&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;+(UIWindow*)getWindow {
    UIWindow* win = nil;  //[UIApplication sharedApplication].keyWindow;
    for (id item in [UIApplication sharedApplication].windows) {
        if ([item class] == [UIWindow class]) {
            if (!((UIWindow*)item).hidden) {
                win = item;
                break;
            }
        }
    }
    return win;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;25修改textfield的placeholder的字体颜色大小&quot;&gt;25.修改textField的placeholder的字体颜色、大小&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;[textField setValue:[UIColor redColor] forKeyPath:@&quot;_placeholderLabel.textColor&quot;];
[textField setValue:[UIFont boldSystemFontOfSize:16] forKeyPath:@&quot;_placeholderLabel.font&quot;];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;26统一收起键盘&quot;&gt;26.统一收起键盘&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;[[[UIApplication sharedApplication] keyWindow] endEditing:YES];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;27控制屏幕旋转在控制器中写&quot;&gt;27.控制屏幕旋转，在控制器中写&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;/** 是否支持自动转屏 */
- (BOOL)shouldAutorotate {
    return YES;
}
 
/** 支持哪些屏幕方向 */
- (UIInterfaceOrientationMask)supportedInterfaceOrientations {
    return UIInterfaceOrientationMaskLandscapeLeft | UIInterfaceOrientationMaskLandscapeRight;
}
 
/** 默认的屏幕方向（当前ViewController必须是通过模态出来的UIViewController（模态带导航的无效）方式展现出来的，才会调用这个方法） */
- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation {
    return UIInterfaceOrientationLandscapeLeft | UIInterfaceOrientationLandscapeRight;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;28获取app缓存大小&quot;&gt;28.获取app缓存大小&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;- (CGFloat)getCachSize {    
    NSUInteger imageCacheSize = [[SDImageCache sharedImageCache] getSize];
    //获取自定义缓存大小
    //用枚举器遍历 一个文件夹的内容
    //1.获取 文件夹枚举器
    NSString *myCachePath = [NSHomeDirectory() stringByAppendingPathComponent:@&quot;Library/Caches&quot;];
    NSDirectoryEnumerator *enumerator = [[NSFileManager defaultManager] enumeratorAtPath:myCachePath];
    __block NSUInteger count = 0;
    //2.遍历
    for (NSString *fileName in enumerator) {
        NSString *path = [myCachePath stringByAppendingPathComponent:fileName];
        NSDictionary *fileDict = [[NSFileManager defaultManager] attributesOfItemAtPath:path error:nil];
        count += fileDict.fileSize;//自定义所有缓存大小
    }
    // 得到是字节  转化为M
    CGFloat totalSize = ((CGFloat)imageCacheSize+count)/1024/1024;
    return totalSize;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;29清理app缓存&quot;&gt;29.清理app缓存&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;- (void)handleClearCache {
    //删除两部分
    //1.删除 sd 图片缓存
    //先清除内存中的图片缓存
    [[SDImageCache sharedImageCache] clearMemory];
    //清除磁盘的缓存
    [[SDImageCache sharedImageCache] clearDisk];
    //2.删除自己缓存
    NSString *myCachePath = [NSHomeDirectory() stringByAppendingPathComponent:@&quot;Library/Caches&quot;];
    [[NSFileManager defaultManager] removeItemAtPath:myCachePath error:nil];
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;30长按复制功能&quot;&gt;30.长按复制功能&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;- (void)viewDidLoad
{
    [self.view addGestureRecognizer:[[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(pasteBoard:)]];
}
- (void)pasteBoard:(UILongPressGestureRecognizer *)longPress {
    if (longPress.state == UIGestureRecognizerStateBegan) {
        UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
        pasteboard.string = @&quot;需要复制的文本&quot;;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;31cocoapods升级&quot;&gt;31.CocoaPods升级&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;在终端执行 sudo gem install -n / usr / local / bin cocoapods --pre&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;32判断图片类型&quot;&gt;32.判断图片类型&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;//通过图片Data数据第一个字节 来获取图片扩展名
- (NSString *)contentTypeForImageData:(NSData *)data
{
    uint8_t c;
    [data getBytes:&amp;amp;c length:1];
    switch (c)
    {
        case 0xFF:
            return @&quot;jpeg&quot;;
 
        case 0x89:
            return @&quot;png&quot;;
 
        case 0x47:
            return @&quot;gif&quot;;
 
        case 0x49:
        case 0x4D:
            return @&quot;tiff&quot;;
 
        case 0x52:
        if ([data length] &amp;lt; 12) {
            return nil;
        }
 
        NSString *testString = [[NSString alloc] initWithData:[data subdataWithRange:NSMakeRange(0, 12)] encoding:NSASCIIStringEncoding];
        if ([testString hasPrefix:@&quot;RIFF&quot;]
            &amp;amp;&amp;amp; [testString hasSuffix:@&quot;WEBP&quot;])
        {
            return @&quot;webp&quot;;
        }
 
        return nil;
    }
 
    return nil;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;33获取手机和app信息&quot;&gt;33.获取手机和app信息&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];  
CFShow(infoDictionary);  
// app名称  
NSString *app_Name = [infoDictionary objectForKey:@&quot;CFBundleDisplayName&quot;];  
// app版本  
NSString *app_Version = [infoDictionary objectForKey:@&quot;CFBundleShortVersionString&quot;];  
// app build版本  
NSString *app_build = [infoDictionary objectForKey:@&quot;CFBundleVersion&quot;];    
      
//手机序列号  
NSString* identifierNumber = [[UIDevice currentDevice] uniqueIdentifier];  
NSLog(@&quot;手机序列号: %@&quot;,identifierNumber);  
//手机别名： 用户定义的名称  
NSString* userPhoneName = [[UIDevice currentDevice] name];  
NSLog(@&quot;手机别名: %@&quot;, userPhoneName);  
//设备名称  
NSString* deviceName = [[UIDevice currentDevice] systemName];  
NSLog(@&quot;设备名称: %@&quot;,deviceName );  
//手机系统版本  
NSString* phoneVersion = [[UIDevice currentDevice] systemVersion];  
NSLog(@&quot;手机系统版本: %@&quot;, phoneVersion);  
//手机型号  
NSString* phoneModel = [[UIDevice currentDevice] model];  
NSLog(@&quot;手机型号: %@&quot;,phoneModel );  
//地方型号  （国际化区域名称）  
NSString* localPhoneModel = [[UIDevice currentDevice] localizedModel];  
NSLog(@&quot;国际化区域名称: %@&quot;,localPhoneModel );  
      
NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];  
// 当前应用名称  
NSString *appCurName = [infoDictionary objectForKey:@&quot;CFBundleDisplayName&quot;];  
NSLog(@&quot;当前应用名称：%@&quot;,appCurName);  
// 当前应用软件版本  比如：1.0.1  
NSString *appCurVersion = [infoDictionary objectForKey:@&quot;CFBundleShortVersionString&quot;];  
NSLog(@&quot;当前应用软件版本:%@&quot;,appCurVersion);  
// 当前应用版本号码   int类型  
NSString *appCurVersionNum = [infoDictionary objectForKey:@&quot;CFBundleVersion&quot;];  
NSLog(@&quot;当前应用版本号码：%@&quot;,appCurVersionNum); &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;34获取一个类的所有属性&quot;&gt;34.获取一个类的所有属性&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;id LenderClass = objc_getClass(&quot;Lender&quot;);
unsigned int outCount, i;
objc_property_t *properties = class_copyPropertyList(LenderClass, &amp;amp;outCount);
for (i = 0; i &amp;lt; outCount; i++) {
    objc_property_t property = properties[i];
    fprintf(stdout, &quot;%s %s\n&quot;, property_getName(property), property_getAttributes(property));
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;35image圆角&quot;&gt;35.image圆角&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;- (UIImage *)circleImage
{
    // NO代表透明
    UIGraphicsBeginImageContextWithOptions(self.size, NO, 1);
    // 获得上下文
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    // 添加一个圆
    CGRect rect = CGRectMake(0, 0, self.size.width, self.size.height);
    // 方形变圆形
    CGContextAddEllipseInRect(ctx, rect);
    // 裁剪
    CGContextClip(ctx);
    // 将图片画上去
    [self drawInRect:rect];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return image;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;36view圆角&quot;&gt;36.view圆角&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;UIView *aView = [[UIView alloc] init]; 
aView.frame = CGRectMake(0, 0, 300, 200);
aView.backgroundColor = [UIColor redColor]; 
//设置圆角边框 
aView.layer.cornerRadius = 8; 
aView.layer.masksToBounds = YES;  
//设置边框及边框颜色  
aView.layer.borderWidth = 8; 
aView.layer.borderColor = [[UIColor grayColor] CGColor];
[self.view addSubview:aView];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;37kvo监听某个对象的属性&quot;&gt;37.KVO监听某个对象的属性&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;// 添加监听者
[self addObserver:self forKeyPath:property options:NSKeyValueObservingOptionNew context:nil];
 
// 当监听的属性值变化的时候会来到这个方法
- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
    if ([keyPath isEqualToString:@&quot;property&quot;]) {
       [self textViewTextChange];
       } else {
     }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;38afnetworking监听网络状态&quot;&gt;38.AFNetworking监听网络状态&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;// 监听网络状况
AFNetworkReachabilityManager *mgr = [AFNetworkReachabilityManager sharedManager];
[mgr setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
    switch (status) {
        case AFNetworkReachabilityStatusUnknown:
            break;
        case AFNetworkReachabilityStatusNotReachable: {
            [SVProgressHUD showInfoWithStatus:@&quot;当前设备无网络&quot;];
        }
            break;
        case AFNetworkReachabilityStatusReachableViaWiFi:
            [SVProgressHUD showInfoWithStatus:@&quot;当前Wi-Fi网络&quot;];
            break;
        case AFNetworkReachabilityStatusReachableViaWWAN:
            [SVProgressHUD showInfoWithStatus:@&quot;当前蜂窝移动网络&quot;];
            break;
        default:
            break;
    }
}];
[mgr startMonitoring];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;39判断字符串中是否有空格&quot;&gt;39.判断字符串中是否有空格&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;+ (BOOL)isBlank:(NSString *)str {
    NSRange _range = [str rangeOfString:@&quot; &quot;];
    if (_range.location != NSNotFound) {
        //有空格
        return YES;
    } else {
        //没有空格
        return NO;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;40移除字符串中的空格和换行&quot;&gt;40.移除字符串中的空格和换行&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;+ (NSString *)removeSpaceAndNewline:(NSString *)str {
    NSString *temp = [str stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];
    temp = [temp stringByReplacingOccurrencesOfString:@&quot;\r&quot; withString:@&quot;&quot;];
    temp = [temp stringByReplacingOccurrencesOfString:@&quot;\n&quot; withString:@&quot;&quot;];
    return temp;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;41获取一个视频的第一帧图片&quot;&gt;41.获取一个视频的第一帧图片&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;NSURL *url = [NSURL URLWithString:filepath];
AVURLAsset *asset1 = [[AVURLAsset alloc] initWithURL:url options:nil];
AVAssetImageGenerator *generate1 = [[AVAssetImageGenerator alloc] initWithAsset:asset1];
generate1.appliesPreferredTrackTransform = YES;
NSError *err = NULL;
CMTime time = CMTimeMake(1, 2);
CGImageRef oneRef = [generate1 copyCGImageAtTime:time actualTime:NULL error:&amp;amp;err];
UIImage *firstPic = [[UIImage alloc] initWithCGImage:oneRef];

return firstPic;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;42获取视频的时长&quot;&gt;42.获取视频的时长&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;+ (NSInteger)getVideoTimeByUrlString:(NSString *)urlString {
    NSURL *videoUrl = [NSURL URLWithString:urlString];
    AVURLAsset *avUrl = [AVURLAsset assetWithURL:videoUrl];
    CMTime time = [avUrl duration];
    int seconds = ceil(time.value/time.timescale);
    return seconds;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;43字符串是否为空&quot;&gt;43.字符串是否为空&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;+ (BOOL)isEqualToNil:(NSString *)str {
    return str.length &amp;lt;= 0 || [str isEqualToString:@&quot;&quot;] || !str;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;44当tableview占不满一屏时去除下边多余的单元格&quot;&gt;44.当tableView占不满一屏时，去除下边多余的单元格&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;self.tableView.tableHeaderView = [UIView new];
self.tableView.tableFooterView = [UIView new];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;45iskindofclass-和-ismemberofclass的区别&quot;&gt;45.isKindOfClass 和 isMemberOfClass的区别&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;isKindOfClass可以判断某个对象是否属于某个类，或者这个类的子类。
isMemberOfClass更加精准，它只能判断这个对象类型是否为这个类(不能判断子类)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;46从nsurl中拿到链接字符串&quot;&gt;46.从NSURL中拿到链接字符串&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;NSString *urlString = myURL.absoluteString;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;47自定义cell选中背景颜色&quot;&gt;47.自定义cell选中背景颜色&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;UIView *bgColorView = [[UIView alloc] init];
bgColorView.backgroundColor = [UIColor redColor];
[cell setSelectedBackgroundView:bgColorView];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;48获取图片大小&quot;&gt;48.获取图片大小&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;CGFloat imageWidth = image.size.width;
CGFloat imageHeight = imageWidth * image.scale;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;49获取view的坐标在整个window上的位置&quot;&gt;49.获取view的坐标在整个window上的位置&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;// v上的(0, 0)点在toView上的位置
CGPoint point = [v convertPoint:CGPointMake(0, 0) toView:[UIApplication sharedApplication].windows.lastObject];
或者
CGPoint point = [v.superview convertPoint:v.frame.origin toView:[UIApplication sharedApplication].windows.lastObject];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;50在非viewcontroller的地方弹出uialertcontroller对话框&quot;&gt;50.在非ViewController的地方弹出UIAlertController对话框&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;//  最好抽成一个分类
UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@&quot;Title&quot; message:@&quot;message&quot; preferredStyle:UIAlertControllerStyleAlert];
id rootViewController = [UIApplication sharedApplication].delegate.window.rootViewController;
if ([rootViewController isKindOfClass:[UINavigationController class]]) {
    rootViewController = ((UINavigationController *)rootViewController).viewControllers.firstObject;
}
if ([rootViewController isKindOfClass:[UITabBarController class]]) {
    rootViewController = ((UITabBarController *)rootViewController).selectedViewController;
}
[rootViewController presentViewController:alertController animated:YES completion:nil];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;51在应用中打开设置的某个界面&quot;&gt;51.在应用中打开设置的某个界面&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;// 打开设置-&amp;gt;通用
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;prefs:root=General&quot;]];

// 以下是设置其他界面
prefs:root=General&amp;amp;path=About
prefs:root=General&amp;amp;path=ACCESSIBILITY
prefs:root=AIRPLANE_MODE
prefs:root=General&amp;amp;path=AUTOLOCK
prefs:root=General&amp;amp;path=USAGE/CELLULAR_USAGE
prefs:root=Brightness
prefs:root=Bluetooth
prefs:root=General&amp;amp;path=DATE_AND_TIME
prefs:root=FACETIME
prefs:root=General
prefs:root=General&amp;amp;path=Keyboard
prefs:root=CASTLE
prefs:root=CASTLE&amp;amp;path=STORAGE_AND_BACKUP
prefs:root=General&amp;amp;path=INTERNATIONAL
prefs:root=LOCATION_SERVICES
prefs:root=ACCOUNT_SETTINGS
prefs:root=MUSIC
prefs:root=MUSIC&amp;amp;path=EQ
prefs:root=MUSIC&amp;amp;path=VolumeLimit
prefs:root=General&amp;amp;path=Network
prefs:root=NIKE_PLUS_IPOD
prefs:root=NOTES
prefs:root=NOTIFICATIONS_ID
prefs:root=Phone
prefs:root=Photos
prefs:root=General&amp;amp;path=ManagedConfigurationList
prefs:root=General&amp;amp;path=Reset
prefs:root=Sounds&amp;amp;path=Ringtone
prefs:root=Safari
prefs:root=General&amp;amp;path=Assistant
prefs:root=Sounds
prefs:root=General&amp;amp;path=SOFTWARE_UPDATE_LINK
prefs:root=STORE
prefs:root=TWITTER
prefs:root=FACEBOOK
prefs:root=General&amp;amp;path=USAGE prefs:root=VIDEO
prefs:root=General&amp;amp;path=Network/VPN
prefs:root=Wallpaper
prefs:root=WIFI
prefs:root=INTERNET_TETHERING
prefs:root=Phone&amp;amp;path=Blocked
prefs:root=DO_NOT_DISTURB&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;52仿苹果抖动动画&quot;&gt;52.仿苹果抖动动画&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;#define RADIANS(degrees) (((degrees) * M_PI) / 180.0)

- (void)startAnimate {
    view.transform = CGAffineTransformRotate(CGAffineTransformIdentity, RADIANS(-5));
    
    [UIView animateWithDuration:0.25 delay:0.0 options:(UIViewAnimationOptionAllowUserInteraction | UIViewAnimationOptionRepeat | UIViewAnimationOptionAutoreverse) animations:^ {
                         view.transform = CGAffineTransformRotate(CGAffineTransformIdentity, RADIANS(5));
                     } completion:nil];
}

- (void)stopAnimate {
    [UIView animateWithDuration:0.25 delay:0.0 options:(UIViewAnimationOptionAllowUserInteraction | UIViewAnimationOptionBeginFromCurrentState | UIViewAnimationOptionCurveLinear) animations:^ {
                         view.transform = CGAffineTransformIdentity;
                     } completion:nil];
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;53单个页面多个网络请求的情况需要监听所有网络请求结束后刷新ui&quot;&gt;53.单个页面多个网络请求的情况，需要监听所有网络请求结束后刷新UI&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;dispatch_group_t group = dispatch_group_create();
dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.wzb.test.www&quot;, DISPATCH_QUEUE_SERIAL);
dispatch_group_enter(group);
dispatch_group_async(group, serialQueue, ^{
    // 网络请求一
    [WebClick getDataSuccess:^(ResponseModel *model) {
        dispatch_group_leave(group);
    } failure:^(NSString *err) {
        dispatch_group_leave(group);
    }];
});
dispatch_group_enter(group);
dispatch_group_async(group, serialQueue, ^{
    // 网络请求二
    [WebClick getDataSuccess:getBigTypeRM onSuccess:^(ResponseModel *model) {
        dispatch_group_leave(group);
    } failure:^(NSString *errorString) {
        dispatch_group_leave(group);
    }];
});
dispatch_group_enter(group);
dispatch_group_async(group, serialQueue, ^{
    // 网络请求三
    [WebClick getDataSuccess:^{
        dispatch_group_leave(group);
    } failure:^(NSString *errorString) {
        dispatch_group_leave(group);
    }];
});
    
// 所有网络请求结束后会来到这个方法
dispatch_group_notify(group, serialQueue, ^{
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            // 刷新UI
        });
    });
});&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="blog" /><category term="iOS" /><summary type="html">Summary</summary></entry><entry><title type="html">Markdown Common Elements</title><link href="http://localhost:4000/markdown-common-elements/" rel="alternate" type="text/html" title="Markdown Common Elements" /><published>2016-02-24T19:00:00+08:00</published><updated>2016-02-24T19:00:00+08:00</updated><id>http://localhost:4000/markdown-common-elements</id><content type="html" xml:base="http://localhost:4000/markdown-common-elements/">&lt;h2 id=&quot;basic-formatting&quot;&gt;Basic formatting&lt;/h2&gt;

&lt;p&gt;This note &lt;strong&gt;demonstrates&lt;/strong&gt; some of what &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; is &lt;em&gt;capable of doing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And that’s how to do it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;This note **demonstrates** some of what [Markdown][some/link] is *capable of doing*.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;headings&quot;&gt;Headings&lt;/h2&gt;

&lt;p&gt;There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character. But we are using just 4 of them.&lt;/p&gt;

&lt;h1 id=&quot;headings-can-be-small&quot;&gt;Headings can be small&lt;/h1&gt;

&lt;h2 id=&quot;headings-can-be-small-1&quot;&gt;Headings can be small&lt;/h2&gt;

&lt;h3 id=&quot;headings-can-be-small-2&quot;&gt;Headings can be small&lt;/h3&gt;

&lt;h4 id=&quot;headings-can-be-small-3&quot;&gt;Headings can be small&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;# Heading
## Heading
### Heading
#### Heading&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;h3 id=&quot;ordered-list&quot;&gt;Ordered list&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;A second item&lt;/li&gt;
  &lt;li&gt;Number 3&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;1. Item 1
2. A second item
3. Number 3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;unordered-list&quot;&gt;Unordered list&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;An item&lt;/li&gt;
  &lt;li&gt;Another item&lt;/li&gt;
  &lt;li&gt;Yet another item&lt;/li&gt;
  &lt;li&gt;And there’s more…&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;* An item
* Another item
* Yet another item
* And there's more...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;paragraph-modifiers&quot;&gt;Paragraph modifiers&lt;/h2&gt;

&lt;h3 id=&quot;quote&quot;&gt;Quote&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;&amp;gt; Here is a quote. What this is should be self explanatory.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;urls&quot;&gt;URLs&lt;/h2&gt;

&lt;p&gt;URLs can be made in a handful of ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A named link to &lt;a href=&quot;http://www.markitdown.net/&quot;&gt;Mark It Down&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Another named link to &lt;a href=&quot;http://markitdown.net/&quot;&gt;Mark It Down&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sometimes you just want a URL like &lt;a href=&quot;http://markitdown.net/&quot;&gt;http://markitdown.net/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;* A named link to [MarkItDown][3].
* Another named link to [MarkItDown](http://markitdown.net/)
* Sometimes you just want a URL like &amp;lt;http://markitdown.net/&amp;gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;horizontal-rule&quot;&gt;Horizontal rule&lt;/h2&gt;

&lt;p&gt;A horizontal rule is a line that goes across the middle of the page.
It’s sometimes handy for breaking things up.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;---&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;images&quot;&gt;Images&lt;/h2&gt;

&lt;p&gt;Markdown can also contain images. I’ll need to add something here sometime.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;![Markdowm Image][/image/url]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/ghost-blog.jpg&quot; alt=&quot;Markdowm Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure Caption&lt;/em&gt;?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;![Markdowm Image][/image/url]
&amp;lt;figcaption class=&quot;caption&quot;&amp;gt;Photo by John Doe&amp;lt;/figcaption&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/ghost-blog.jpg&quot; alt=&quot;Markdowm Image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Photo by John Doe&lt;/figcaption&gt;

&lt;p&gt;&lt;em&gt;Bigger Images&lt;/em&gt;?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;![Markdowm Image][/image/url]{: class=&quot;bigger-image&quot; }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/ghost-blog.jpg&quot; alt=&quot;Markdowm Image&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;A HTML Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Just a test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A CSS Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.8em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;tt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Monaco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Consolas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inconsolata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;monospace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A JS Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Sticky Header&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;show-menu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#hamburguer__open&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;show-menu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#hamburguer__open&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fadeIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>johndoe</name></author><category term="blog" /><category term="markdown" /><category term="elements" /><summary type="html">Basic formatting</summary></entry><entry><title type="html">Indigo Jekyll Theme</title><link href="http://localhost:4000/indigo-jekyll-theme/" rel="alternate" type="text/html" title="Indigo Jekyll Theme" /><published>2016-01-23T22:22:00+08:00</published><updated>2016-01-23T22:22:00+08:00</updated><id>http://localhost:4000/indigo-jekyll-theme</id><content type="html" xml:base="http://localhost:4000/indigo-jekyll-theme/">&lt;!-- [Screenshot](http://localhost:4000/assets/images/profile.jpg) --&gt;

&lt;p&gt;Example of project - Indigo Minimalist Jekyll Template - &lt;a href=&quot;http://sergiokopplin.github.io/indigo/&quot;&gt;Demo&lt;/a&gt;. This is a simple and minimalist template for Jekyll for those who likes to eat noodles.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What has inside?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gulp&lt;/li&gt;
  &lt;li&gt;BrowserSync&lt;/li&gt;
  &lt;li&gt;Stylus&lt;/li&gt;
  &lt;li&gt;SVG&lt;/li&gt;
  &lt;li&gt;Travis&lt;/li&gt;
  &lt;li&gt;No JS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?url=http%3A%2F%2Fsergiokopplin.github.io%2Findigo%2F&quot;&gt;98/100&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- --- --&gt;

&lt;!-- [Check it out](http://sergiokopplin.github.io/indigo/) here.
If you need some help, just [tell me](http://github.com/sergiokopplin/indigo/issues). --&gt;</content><author><name></name></author><category term="project" /><category term="Lee" /><summary type="html"></summary></entry><entry><title type="html">Markdown Extra Components</title><link href="http://localhost:4000/markdown-extra-components/" rel="alternate" type="text/html" title="Markdown Extra Components" /><published>2015-02-24T20:00:00+08:00</published><updated>2015-02-24T20:00:00+08:00</updated><id>http://localhost:4000/markdown-extra-components</id><content type="html" xml:base="http://localhost:4000/markdown-extra-components/">&lt;h2 id=&quot;summary&quot;&gt;Summary:&lt;/h2&gt;

&lt;p&gt;You can pick as item to see how to apply in markdown.&lt;/p&gt;

&lt;h4 id=&quot;especial-elements&quot;&gt;Especial Elements&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#evidence&quot;&gt;Evidence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#side-by-side&quot;&gt;Side-by-Side&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#star&quot;&gt;Star&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#especial-breaker&quot;&gt;Especial Breaker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spoiler&quot;&gt;Spoiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;external-elements&quot;&gt;External Elements&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#gist&quot;&gt;Gist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#codepen&quot;&gt;Codepen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#slideshare&quot;&gt;Slideshare&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#videos&quot;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;evidence&quot;&gt;Evidence&lt;/h2&gt;

&lt;p&gt;You can try the evidence!&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;evidence&quot;&gt;Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;evidence&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;side-by-side&quot;&gt;Side-by-side&lt;/h2&gt;

&lt;p&gt;Like the &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image&lt;/strong&gt; on the left and &lt;strong&gt;Text&lt;/strong&gt; on the right:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;side-by-side&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toleft&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:4000/assets/images/profile.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alt Text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;caption&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Photo by John Doe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toright&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;side-by-side&quot;&gt;
    &lt;div class=&quot;toleft&quot;&gt;
        &lt;img class=&quot;image&quot; src=&quot;http://localhost:4000/assets/images/profile.jpg&quot; alt=&quot;Alt Text&quot; /&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;Photo by John Doe&lt;/figcaption&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toright&quot;&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Text&lt;/strong&gt; on the left and &lt;strong&gt;Image&lt;/strong&gt; on the right:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;side-by-side&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toleft&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toright&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:4000/assets/images/profile.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alt Text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;caption&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Photo by John Doe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;side-by-side&quot;&gt;
    &lt;div class=&quot;toleft&quot;&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toright&quot;&gt;
        &lt;img class=&quot;image&quot; src=&quot;http://localhost:4000/assets/images/profile.jpg&quot; alt=&quot;Alt Text&quot; /&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;Photo by John Doe&lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;star&quot;&gt;Star&lt;/h2&gt;

&lt;p&gt;You can give evidence to a post. Just add the tag to the markdown file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;star: true&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;especial-breaker&quot;&gt;Especial Breaker&lt;/h2&gt;

&lt;p&gt;You can add a especial &lt;em&gt;hr&lt;/em&gt; to your text.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;breaker&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;breaker&quot;&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spoiler&quot;&gt;Spoiler&lt;/h2&gt;

&lt;p&gt;You can add an especial hidden content that appears on hover.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spoiler&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;your content&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;spoiler&quot;&gt;&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;gist&quot;&gt;Gist&lt;/h2&gt;

&lt;p&gt;You can add Gists from github.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;{ % gist sergiokopplin/91ff4220480727b47224245ee2e9c291 % }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;noscript&gt;&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Just a Test!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Working!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/sergiokopplin/91ff4220480727b47224245ee2e9c291.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;codepen&quot;&gt;Codepen&lt;/h2&gt;

&lt;p&gt;You can add Pens from Codepen.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;268&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-theme-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-slug-hash=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gfdDu&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-default-tab=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-user=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chriscoyier&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'codepen'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    See the Pen &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://codepen.io/chriscoyier/pen/gfdDu/'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Crappy Recreation of the Book Cover of *The Flame Alphabet*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; by Chris Coyier (&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://codepen.io/chriscoyier'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@chriscoyier&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;) on &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://codepen.io'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;CodePen&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//assets.codepen.io/assets/embed/ei.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;gfdDu&quot; data-default-tab=&quot;result&quot; data-user=&quot;chriscoyier&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/chriscoyier/pen/gfdDu/&quot;&gt;Crappy Recreation of the Book Cover of *The Flame Alphabet*&lt;/a&gt; by Chris Coyier (&lt;a href=&quot;http://codepen.io/chriscoyier&quot;&gt;@chriscoyier&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;slideshare&quot;&gt;Slideshare&lt;/h2&gt;

&lt;p&gt;Add your presentations here!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;560&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;310&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;marginwidth=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;marginheight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrolling=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allowfullscreen&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l&quot; width=&quot;560&quot; height=&quot;310&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;/h2&gt;

&lt;p&gt;Do you want some videos? Youtube, Vimeo or Vevo? Copy the embed code and paste on your post!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;560&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;310&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.youtube.com/embed/r7XhWUDj-Ts&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allowfullscreen&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/r7XhWUDj-Ts&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><category term="blog" /><category term="markdown" /><category term="components" /><category term="extra" /><summary type="html">Summary:</summary></entry></feed>